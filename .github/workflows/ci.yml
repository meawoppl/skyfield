name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  PYTHON_VERSION: "3.10.8"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "starfield-build-cache"
      
      - name: Check formatting
        run: cargo fmt -- --check
        
      - name: Run clippy
        run: cargo clippy -- -D warnings
      
      - name: Run tests (excluding Python comparison tests)
        run: cargo test -- --skip python_comparison
        
  python-comparison:
    name: Python Comparison Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install skyfield pytest
          python -c "import skyfield; print(f'Skyfield version: {skyfield.__version__}')"
          # Create a symlink to make sure we're using the system Python
          echo "$(which python)" > .python_path
      
      - name: Verify Skyfield installation
        run: |
          # Create a more verbose test script with detailed Python environment info
          cat > ci_test_python.py << 'EOF'
#!/usr/bin/env python
import sys
import os
import site

print("Python executable:", sys.executable)
print("Python version:", sys.version)

# Print Python path info
print("\nPython path information:")
print("sys.prefix:", sys.prefix)
try:
    print("site.getsitepackages():", site.getsitepackages())
except Exception as e:
    print("Error getting site packages:", e)
print("sys.path:")
for p in sys.path:
    print(f"  - {p}")

# Print environment variables
print("\nRelevant environment variables:")
for var in ["PYTHONPATH", "PYTHONHOME"]:
    print(f"{var}: {os.environ.get(var, 'not set')}")

# Try importing skyfield
print("\nTrying to import skyfield:")
try:
    import skyfield
    print(f"SUCCESS! Skyfield {skyfield.__version__} installed at {skyfield.__file__}")
    
    # Try importing other skyfield modules
    print("\nTrying to import other skyfield modules:")
    modules = ["skyfield.api", "skyfield.data"]
    for module in modules:
        try:
            m = __import__(module, fromlist=[""])
            print(f"  ✓ {module} imported successfully")
        except Exception as e:
            print(f"  ✗ {module} import failed: {e}")
    
    # Test creating a star
    print("\nTrying to create a Star object:")
    from skyfield.api import Star
    sirius = Star(ra_hours=6.75, dec_degrees=-16.7)
    print(f"  ✓ Created Star object: {sirius}")
    
except ImportError as e:
    print(f"FAILED to import skyfield: {e}")
    sys.exit(1)

print("\nAll tests passed! Skyfield is working correctly.")
EOF
          
          chmod +x ci_test_python.py
          python ci_test_python.py
          
          # Also verify the existing test script
          chmod +x test_skyfield.py
          python test_skyfield.py
          
      - name: Install necessary system dependencies for pyo3
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "starfield-build-cache"
      
      - name: Update test scripts to use absolute Python path
        run: |
          PYTHON_EXEC=$(cat .python_path)
          
          # Update test_skyfield.py to use absolute path to Python interpreter
          sed -i "1s|^#!/usr/bin/env python|#!${PYTHON_EXEC}|" test_skyfield.py
          
          # Add some debug output to test_skyfield.py
          sed -i '3i import sys; print("Running with Python:", sys.executable)' test_skyfield.py
          
          # Check the modified script
          echo "Modified test_skyfield.py:"
          cat test_skyfield.py | head -n 5
      
      - name: Run Python comparison tests
        run: |
          # Ensure Rust tests use the same Python where we installed Skyfield
          PYTHON_EXEC=$(cat .python_path)
          echo "Using Python: $PYTHON_EXEC"
          
          # Export PyO3 environment variables to help it find the right Python
          export PYO3_PYTHON="$PYTHON_EXEC"
          export PYTHONPATH="${{ github.workspace }}"
          export PYTHON_SYS_EXECUTABLE="$PYTHON_EXEC"
          
          # Adding debugging information
          echo "Python Executable Path: $PYTHON_EXEC"
          echo "Python Library Path: $(find $(dirname $PYTHON_EXEC)/.. -name "libpython*.so*" | head -n 1)"
          
          # Set environment variable for the test to use python from PATH
          export PYTHON_COMMAND="$PYTHON_EXEC"
          
          # Run tests with verbose output
          RUST_LOG=debug cargo test python_comparison -- --nocapture
        
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "starfield-build-cache"
      
      - name: Build
        run: cargo build --release
        
      - name: Run examples
        run: |
          for example in $(cargo run --example 2>&1 | grep -oP '(?<=Available examples:).*' | tr -d ' ' | tr ',' '\n'); do
            echo "Running example: $example"
            cargo run --example $example || echo "Example $example failed but continuing..."
          done